const Discord = require('discord.js');
const { token } = require('./settings');
const bot = new Discord.Client();
const printer = require('./printembed');
const database = require('./sqlfuncs');
const { channel } = require('diagnostics_channel');
const JSONremind = require('./remindDates.json');
const fs = require("fs");
const PDFDocument = require('pdfkit');
const { stroke } = require('pdfkit');

database.login();

bot.on('message', (message) => {

    if(message.author.bot){
        return;
    }

    const parts = message.content.split(' ');

    if(parts[0] == '!test'){
       //message.channel.send("theres nothing to test right now.");
        // Create a document
        
        database.checkExists(message.guild.id, 'user test', function(error, result){
            if(error){
                console.log(error);
            }
            else{

                const doc = new PDFDocument();

                // Pipe its output somewhere, like to a file or HTTP response
                // See below for browser usage
                doc.pipe(fs.createWriteStream('testProject.pdf'));

                // Embed a font, set the font size, and render some text
                doc
                .font('fonts/times new roman.ttf')
                .fontSize(28)
                .text('Project Coordinator Project Summary:', {
                    align: 'center'
                });

                var tempSplit = result[0].projectname.split(' ');

                for(l = 0; l < tempSplit.length; l++){
                    tempSplit[l] = tempSplit[l][0].toUpperCase() + tempSplit[l].substr(1);
                }
            
                var capsNames = '';
            
                for(j = 0; j < tempSplit.length; j++){
                    capsNames += tempSplit[j] + ' ';
                }

                doc
                .fontSize(24)
                .text(`${capsNames} Project Summary`, {
                    align: 'center'
                });

                doc.rect(doc.x, 60, 470, 75).stroke('blue');

                doc
                .moveDown(1)
                .fontSize(11)
                .translate(35, 0)
                .text('This document was auto-generated by the Project Coordinator Bot. It contains all general information entered by the user who created the document as well as all notes attached to the project. In the PDF are any other files that were tacked onto the project as well.', {
                    oblique: true,
                    width: 400,
                    align: 'center',
                    
                });

                doc.moveDown(3);

                var manager = result[0].projectmanager;

                manager = manager.replace('<', '');
                manager = manager.replace('>', '');
                manager = manager.replace('@', '');
                manager = manager.replace('!', '');

                console.log(manager);

                doc
                .translate(-35, 0)
                .fontSize(16)
                .text(`Project Manager:`, {
                    align: 'left',
                    underline: true,
                })
                .moveDown(1);
                
                doc
                .fontSize(14)
                .text(`     ${message.guild.members.cache.find(name => name.id === manager).displayName}`,  {
                    align: 'left',
                    oblique: true
                })

                doc.moveDown(1);

                doc
                .fontSize(16)
                .text('Team Members:', {
                    align: 'left',
                    underline: true,
                })
                .moveDown(1);

                var team = result[0].teammembers;

                var teamArray = []
                teamArray = team.split('\n');
                console.log(teamArray.length);

                for(i = 0; i < teamArray.length-1; i++){
                    teamArray[i] = teamArray[i].replace('<', '');
                    teamArray[i] = teamArray[i].replace('>', '');
                    teamArray[i] = teamArray[i].replace('@', '');
                    teamArray[i] = teamArray[i].replace('!', '');

                    console.log(teamArray[i]);
                    console.log(i);

                    teamArray[i] = message.guild.members.cache.find(name => name.id === teamArray[i]).displayName;
                }

                var teamString = '';

                for(j = 0; j < teamArray.length-1; j++){
                    if(j == teamArray.length-1){
                        teamString += '• ' + teamArray[j];
                    }
                    else{
                        teamString += '• ' + teamArray[j] + '\n';
                    }
                }

                doc
                .fontSize(14)
                .translate(20,0)
                .text(teamString, {
                    oblique: true
                })
                .translate(-20, 0);


                doc.moveDown(1);

                doc
                .fontSize(16)
                .text(`Project Created On:`, {
                    align: 'left',
                    underline: true,
                })
                .moveDown(1);

                doc
                .fontSize(14)
                .text(`     ${(result[0].datecreated.getMonth()+1) + '-' + (result[0].datecreated.getDate()) + '-' + (result[0].datecreated.getFullYear())}`, {
                    align: 'left'
                })

                doc.moveDown(1);

                doc
                .fontSize(16)
                .text(`Project Completed By:`, {
                    align: 'left',
                    underline: true,
                })
                .moveDown(1);

                doc
                .fontSize(14)
                .text(`     ${(result[0].datedue.getMonth()+1) + '-' + (result[0].datedue.getDate()) + '-' + (result[0].datedue.getFullYear())}`, {
                    align: 'left'
                })

                doc.moveDown(1);

                doc
                .fontSize(16)
                .text('Project Description:', {
                    align: 'left',
                    underline: true,
                })

                doc.moveDown(1);

                doc
                .fontSize(14)
                .text(`     ${result[0].projectdescription}`, {
                    align: 'left'
                })

                // Draw a triangle
                /*doc
                .save()
                .moveTo(100, 150)
                .lineTo(100, 250)
                .lineTo(200, 250)
                .fill('#FF3300');

                // Apply some transforms and render an SVG path with the 'even-odd' fill rule
                doc
                .scale(0.6)
                .translate(470, -380)
                .path('M 250,75 L 323,301 131,161 369,161 177,301 z')
                .fill('red', 'even-odd')
                .restore();*/

                // Add some text with annotations
                /*doc
                .addPage()
                .fillColor('blue')
                .text('Here is a link!', 100, 100)
                .underline(100, 100, 160, 27, { color: '#0000FF' })
                .link(100, 100, 160, 27, 'http://google.com/');*/

                // Finalize PDF file

                if(result[0].notes != null){
                    doc
                    .addPage()
                    .stroke('blue')
                    .fontSize(16)
                    .text('Project Notes:', {
                        align: 'left',
                        underline: true,

                    })
                    .moveDown(1);

                    var field = [];
                    var note = result[0].notes.split('-');
                    console.log(note);
                    for(i = 0; i < note.length-1; i++){
                        field[i] = note[i].split('~');
                    }
                    console.log(field);
                    console.log(field.length);
                    var noteString = '';
                    for(k = 0; k <field.length; k++){
                        var user = bot.users.cache.find(user => user.id === field[k][0]);

                        noteString += '• Created on ' + field[k][1] + ' by ' + message.guild.members.cache.find(name => name.id === field[k][0]).displayName + ':\n\n     ' + field[k][2] + '\n\n';
                    }

                    doc
                    .fontSize(14)
                    .translate(20,0)
                    .text(noteString, {
                        oblique: true
                    })
                    .translate(-20, 0);
                }
                else{
                    doc
                    .addPage()
                    .stroke('blue')
                    .fontSize(16)
                    .text('No notes were created in this project.', {
                        align: 'left',
                        underline: true,
                        characterSpacing: 0.75
                    });
                }


                doc.end();

                message.channel.send('Here is your project file:', { files: ["./testProject.pdf"] })
                    .then(() =>{
                        
                        var path = './testProject.pdf';

                        try{
                            fs.unlinkSync(path);
                        }
                        catch(err){
                            console.log(err);
                        }
                    })
                    .catch(console.err);   

            }
        });

    }
    
    if(parts[0].toLowerCase() ==  '!createnew'){
        
        var concatString = '';

        if(parts.length == 1){
            message.channel.send("\\❗ I need you to give me a name for the project please! Like this:\n**!createnew Example Project**");
            return;
        }

        if(parts.length > 1){
            for(i = 1; i < parts.length; i++){
                if(i == parts.length-1){
                    concatString += parts[i];
                }
                else{
                    concatString += parts[i] + ' ';
                }
            }

            console.log(concatString.toLowerCase());
        }

        database.checkDatabaseDuplicate(concatString, function(err, result){
            if(err){
                console.log(err)
            }
            else{
                console.log(result);
                if(result.length >= 1){
                    message.channel.send("\\❗ A project with that name already exists in the database. Please do **!createnew** again with different name.");
                    return;
                }
                else{
                    getDescription(concatString);
                }
            }   
        });
    }
    else if(parts[0].toLowerCase() == '!commands'){
        //message.reply('Here is the list of commands you can use to communicate with me:\n\\🟢!createnew *<projectname>*\n\\🟢!display:\n\t\t\\➡️*!display created*\n\t\t\\➡️*!display in-planning*\n\t\t\\➡️*!display in-development*\n\t\t\\➡️*!display finished*\n\t\t\\➡️*!display all*\n\\🟢!delete *<project name>*\n\\🟢!update\n');
        var print = printer.printCommands();
        console.log(print.length);
        for(i = 0; i < print.length; i++){
            message.channel.send(print[i]);
        }
    }
    else if(parts[0].toLowerCase() == '!display'){

        try{
            if(parts[1].toLowerCase() == 'created' || parts[1].toLowerCase() == 'in-development' || parts[1].toLowerCase() == 'in-planning' || parts[1].toLowerCase() == 'finished' || parts[1].toLowerCase() == 'all'){
                if(parts[1].toLowerCase() == 'all'){
                    displayP(null);
                }
                else{
                    displayP(parts[1].toLowerCase());
                }
            }
            else{
                message.channel.send('\\❗ Something is wrong with the second half of your command. Make sure its one of these following parameters:\n\\➡️*created*\n\\➡️*in-planning*\n\\➡️*in-development*\n\\➡️*finished*\n\\➡️*all*\nFormat it like this example: **!display created**');
            }
        }
        catch(err){
            message.channel.send('\\❗ You\'re missing the second half of your command. Make sure its one of these following parameters:\n\\➡️*created*\n\\➡️*in-planning*\n\\➡️*in-development*\n\\➡️*finished*\n\\➡️*all*\nFormat it like this example: **!display created**');
        }
        
        
    }
    else if(parts[0].toLowerCase() == '!delete'){
        
        var concatString = '';

        if(parts.length > 1){
            for(i = 1; i < parts.length; i++){
                if(i == parts.length-1){
                    concatString += parts[i];
                }
                else{
                    concatString += parts[i] + ' ';
                }
            }

            console.log(concatString);
        }
        deleteProj(concatString.toLowerCase());

    }
    else if(parts[0].toLowerCase() == '!update'){
        
        database.getNames(message.guild.id, function(err, names){
            if(err)console.log(err);


            var string = '';
            var cleanString = '';
            var capsNames;

            if(names.length == 0){
                message.channel.send('\\❗ There are no projects in the database to update.');
                return;
            }

            for(h = 0; h < names.length; h++){

                var tempSplit = names[h].projectname.split(' ');

                for(l = 0; l < tempSplit.length; l++){
                    tempSplit[l] = tempSplit[l][0].toUpperCase() + tempSplit[l].substr(1);
                }
            
                capsNames = '';
            
                for(j = 0; j < tempSplit.length; j++){
                    capsNames += tempSplit[j] + ' ';
                }

                string += `\\✅` + capsNames + '\n';
                cleanString += names[h].projectname.toLowerCase() + '-';
            }

            
            updateProject(string, cleanString);
        });

    }
    else if(parts[0].toLowerCase() == '!remind'){
        var string = message.channel.parent.name;
        if(string.includes("Project Channels")){
            if(message.channel.name.includes("-project-text")){
                console.log('text channel');

                const filter = user => user.id != message.channel.lastMessage.author.id;

                message.channel.send('\\❔ Please give me a name for the reminder:').then(() => {
                    message.channel.awaitMessages(filter, {max: 1, time: 30000, errors: ['time'] })
                    .then(collected =>{
                        var reminderName = collected.first().channel.lastMessage.content;

                        message.channel.send('\\❔ Add a note to go along with the reminder:').then(() => {
                            message.channel.awaitMessages(filter, {max: 1, time: 120000, errors: ['time']} )
                            .then(collected =>{
                                var reminderNote = collected.first().channel.lastMessage.content;

                                message.channel.send('\\❔ What date shall I remind you on?\n**Please format your date as follows: YYYY-MM-DD**').then(() =>{
                                    message.channel.awaitMessages(filter, {max: 1, time: 30000, errors: ['time'] })
                                    .then(collected => {
                                        var reminderDate = collected.first().channel.lastMessage.content;

                                        if(isValidDate(reminderDate)){
                                            try{
                                                var reminders = fs.readFileSync("remindDates.json", "utf-8");
                                            
                                                var pushing = JSON.parse(reminders);
                                            
                                                var reminderObj = {
                                                    reminderName: reminderName,
                                                    remindDate: reminderDate + " 10:00:00.000",
                                                    remindNote: reminderNote,
                                                    userID: "<@"+ message.author.id + ">",
                                                    channelName: message.channel.name
                                                }
                                            
                                                pushing.push(reminderObj);
                                            
                                                reminders = JSON.stringify(pushing);
                                            
                                                fs.writeFileSync("remindDates.json", reminders, "utf-8");
                                            
                                                message.channel.send("\\✅ Okay I'll remind you");
                                            }
                                            catch(err){
                                                message.channel.send("\\❗ Something went wrong creating that reminder I'm sorry.\nPlease try running **!remind** again.");
                                            }
                                        }else{
                                            messsage.channel.send('\\❗ Looks like the format of your date was incorrect, restart from the **!remind** command please.');
                                        }
                                    })
                                    .catch(collected => {
                                        message.channel.send('\\🚫 I waited and you didn\'t give me a date so I\'ll cancel this reminder creation.');
                                    });
                                })


                            })
                            .catch(collected => {
                                message.channel.send('\\🚫 I waited and you didn\'t give me a note so I\'ll cancel this reminder creation.');
                            });
                        })
                    })
                    .catch(collected => {
                        message.channel.send('\\🚫 I waited and you didn\'t give me a name so I\'ll cancel this reminder creation.');
                    });
                });
                
            }
        }
        else{
            message.channel.send('It looks like you are in a channel that isn\'t related to a project.\nPlease confine the remind command to the **text channel** of the project you want to get a reminder for.');
        }
    }
    else if(parts[0].toLowerCase() == '!note'){
        if(message.channel.name.includes('project-text')){
            insertNote();
        }
        else{
            message.channel.send('\\❌ You must be in a project specific channel to use this command.');
        }
    }
    else if(parts[0].toLowerCase() == '!printnotes'){
        if(message.channel.name.includes('project-text')){
            printNotes();
        }
        else{
            message.channel.send('\\❌ You must be in a project specific channel to use this command.');
        }
    }
    else  if(parts[0].toLowerCase() == '!progress'){
        if(message.channel.name.includes('project-text')){
            advanceProjectStage();
        }
        else{
            message.channel.send('\\❌ You must be in a project specific channel to use this command.');
        }
    }

    function advanceProjectStage(){
        
        var string = message.channel.name.replace('-project-text', '');

        console.log(string);
            
        for(p = 0; p < string.length; p++){
            if(string.charAt(p) == '-'){
                string = string.replace('-',' ');
            }
        }

        console.log(string);

        database.checkExists(message.guild.id, string, function(err, display){
            if(err){
                console.log("\\❗ Something went wrong displaying the projects.", err);
            }
            else{

                var state;

                switch(display[0].projectstate){
                    case 'created':
                        state = 'in-planning';
                        break;
                    case 'in-planning':
                        state = 'in-development';
                        break;
                    case 'in-development':
                        state = 'finished';
                        createPDF(display[0].projectname);
                        break;
                    case 'finished':
                        message.channel.send('\\❗ This project was already marked as finished it\'s project state cannot be advanced any further.');
                        return;
                }

                database.changeField(message.guild.id, string, 'projectstate', state, function(err, fieldResult){
                    if(err){
                        console.log(err);
                    }
                    else{
                        console.log(fieldResult);
                        message.channel.send(`\\✅ **Project State Successfully progressed to ${state}.**`);
                    }
                });

            }
        });
    }

    function createPDF(projectName){

        database.checkExists(message.guild.id, projectName, function(error, result){
            if(error){
                console.log(error);
            }
            else{

                const doc = new PDFDocument();

                // Pipe its output somewhere, like to a file or HTTP response
                // See below for browser usage
                doc.pipe(fs.createWriteStream(`${projectName}.pdf`));

                // Embed a font, set the font size, and render some text
                doc
                .font('fonts/times new roman.ttf')
                .fontSize(28)
                .text('Project Coordinator Project Summary:', {
                    align: 'center'
                });

                var tempSplit = result[0].projectname.split(' ');

                for(l = 0; l < tempSplit.length; l++){
                    tempSplit[l] = tempSplit[l][0].toUpperCase() + tempSplit[l].substr(1);
                }
            
                var capsNames = '';
            
                for(j = 0; j < tempSplit.length; j++){
                    capsNames += tempSplit[j] + ' ';
                }

                doc
                .fontSize(24)
                .text(`${capsNames} Project Summary`, {
                    align: 'center'
                });

                doc.rect(doc.x, 60, 470, 75).stroke('blue');

                doc
                .moveDown(1)
                .fontSize(11)
                .translate(35, 0)
                .text('This document was auto-generated by the Project Coordinator Bot. It contains all general information entered by the user who created the document as well as all notes attached to the project. In the PDF are any other files that were tacked onto the project as well.', {
                    oblique: true,
                    width: 400,
                    align: 'center',
                    
                });

                doc.moveDown(3);

                var manager = result[0].projectmanager;

                manager = manager.replace('<', '');
                manager = manager.replace('>', '');
                manager = manager.replace('@', '');
                manager = manager.replace('!', '');

                console.log(manager);

                doc
                .translate(-35, 0)
                .fontSize(16)
                .text(`Project Manager:`, {
                    align: 'left',
                    underline: true,
                })
                .moveDown(1);
                
                doc
                .fontSize(14)
                .text(`     ${message.guild.members.cache.find(name => name.id === manager).displayName}`,  {
                    align: 'left',
                    oblique: true
                })

                doc.moveDown(1);

                doc
                .fontSize(16)
                .text('Team Members:', {
                    align: 'left',
                    underline: true,
                })
                .moveDown(1);

                if(result[0].teammembers.length != 0){
                    var team = result[0].teammembers;

                    var teamArray = []
                    teamArray = team.split('\n');
                    console.log(teamArray.length);

                    for(i = 0; i < teamArray.length-1; i++){
                        teamArray[i] = teamArray[i].replace('<', '');
                        teamArray[i] = teamArray[i].replace('>', '');
                        teamArray[i] = teamArray[i].replace('@', '');
                        teamArray[i] = teamArray[i].replace('!', '');

                        console.log(teamArray[i]);
                        console.log(i);

                        teamArray[i] = message.guild.members.cache.find(name => name.id === teamArray[i]).displayName;
                    }

                    var teamString = '';

                    for(j = 0; j < teamArray.length-1; j++){
                        if(j == teamArray.length-1){
                            teamString += '• ' + teamArray[j];
                        }
                        else{
                            teamString += '• ' + teamArray[j] + '\n';
                        }
                    }

                    doc
                    .fontSize(14)
                    .translate(20,0)
                    .text(teamString, {
                        oblique: true
                    })
                    .translate(-20, 0);


                    doc.moveDown(1);
                }
                else{
                    doc
                    .text('     No team members were added to this project.', {
                        oblique: true
                    })
                    .moveDown(1);
                }

                doc
                .fontSize(16)
                .text(`Project Created On:`, {
                    align: 'left',
                    underline: true,
                })
                .moveDown(1);

                doc
                .fontSize(14)
                .text(`     ${(result[0].datecreated.getMonth()+1) + '-' + (result[0].datecreated.getDate()) + '-' + (result[0].datecreated.getFullYear())}`, {
                    align: 'left'
                })

                doc.moveDown(1);

                doc
                .fontSize(16)
                .text(`Project Completed By:`, {
                    align: 'left',
                    underline: true,
                })
                .moveDown(1);

                doc
                .fontSize(14)
                .text(`     ${(result[0].datedue.getMonth()+1) + '-' + (result[0].datedue.getDate()) + '-' + (result[0].datedue.getFullYear())}`, {
                    align: 'left'
                })

                doc.moveDown(1);

                doc
                .fontSize(16)
                .text('Project Description:', {
                    align: 'left',
                    underline: true,
                })

                doc.moveDown(1);

                doc
                .fontSize(14)
                .text(`${result[0].projectdescription}`, {
                    align: 'left'
                })

                // Draw a triangle
                /*doc
                .save()
                .moveTo(100, 150)
                .lineTo(100, 250)
                .lineTo(200, 250)
                .fill('#FF3300');

                // Apply some transforms and render an SVG path with the 'even-odd' fill rule
                doc
                .scale(0.6)
                .translate(470, -380)
                .path('M 250,75 L 323,301 131,161 369,161 177,301 z')
                .fill('red', 'even-odd')
                .restore();*/

                // Add some text with annotations
                /*doc
                .addPage()
                .fillColor('blue')
                .text('Here is a link!', 100, 100)
                .underline(100, 100, 160, 27, { color: '#0000FF' })
                .link(100, 100, 160, 27, 'http://google.com/');*/

                // Finalize PDF file

                if(result[0].notes != null){
                    doc
                    .addPage()
                    .stroke('blue')
                    .fontSize(16)
                    .text('Project Notes:', {
                        align: 'left',
                        underline: true,
                    })
                    .moveDown(1);

                    var field = [];
                    var note = result[0].notes.split('-');
                    console.log(note);
                    for(i = 0; i < note.length-1; i++){
                        field[i] = note[i].split('~');
                    }
                    console.log(field);
                    console.log(field.length);
                    var noteString = '';
                    for(k = 0; k <field.length; k++){
                        var user = bot.users.cache.find(user => user.id === field[k][0]);

                        noteString += '• Created on ' + field[k][1] + ' by ' + message.guild.members.cache.find(name => name.id === field[k][0]).displayName + ':\n\n     ' + field[k][2] + '\n\n';
                    }

                    doc
                    .fontSize(14)
                    .translate(20,0)
                    .text(noteString, {
                        oblique: true
                    })
                    .translate(-20, 0);
                }
                else{
                    doc
                    .addPage()
                    .stroke('blue')
                    .fontSize(16)
                    .text('No notes were created in this project.', {
                        align: 'left',
                        underline: true,
                    });
                }


                doc.end();

                message.channel.send('\\📰 Since this project has been marked as finished I\'ve generated a PDF of the general information of the project.', { files: [`./${projectName}.pdf`] })
                    .then(() =>{
                        
                        var path = `./${projectName}.pdf`;

                        try{
                            fs.unlinkSync(path);
                        }
                        catch(err){
                            console.log(err);
                        }
                    })
                    .catch(console.err);   
            }
        });
    }

    function printNotes(){

        var string = message.channel.name.replace('-project-text', '');

        console.log(string);
            
        for(p = 0; p < string.length; p++){
            if(string.charAt(p) == '-'){
                string = string.replace('-',' ');
            }
        }

        database.getNotes(message.guild.id, string, function(error, result){
            if(error){
                console.log(error);
            }
            else{
                if(result.length == 0 || result[0].notes == undefined){
                    message.channel.send('\\❗ There are no notes attached to this project right now. Be the first by using **!note**');
                    return;
                }
                
                var field = [];
                var note = result[0].notes.split('-');
                console.log(note);
                for(i = 0; i < note.length-1; i++){
                    field[i] = note[i].split('~');
                }
                console.log(field);
                for(k = 0; k <field.length; k++){
                    var user = bot.users.cache.find(user => user.id === field[k][0]);
                    
                    message.channel.send(printer.printNote(`<@${field[k][0]}>`, field[k][1],field[k][2]));
                }

            }
        });

    }

    function insertNote(){
        const filter = user => user.id != message.channel.lastMessage.author.id;

            var string = message.channel.name.replace('-project-text', '');

            console.log(string);
            
            for(p = 0; p < string.length; p++){
                if(string.charAt(p) == '-'){
                    string = string.replace('-',' ');
                }
            }

            database.getNotes(message.guild.id, string, function(error, result){
                if(error){
                    console.log(error);
                }
                else{
                    
                    if(result[0].notes == null){
                        var notes = '';
                    }
                    else{
                        var notes = result[0].notes;
                    }

                    var today = new Date();

                    var dateString = `${today.getFullYear()}/${(today.getMonth()+1)}/${today.getDate()}`;
                    
                    message.channel.send("\\📰 Type out your note and I'll attach it to the project's information").then(() => {
                        message.channel.awaitMessages(filter, {max: 1, time: 30000, errors: ['time'] })
                        .then(collected => {
                            notes += message.author.id + '~' + dateString + '~' + collected.first().channel.lastMessage.content + '-';
                            console.log(notes);

                            var confirm = database.insertNewNote(notes, message.guild.id, string);

                            message.channel.send(confirm);
                        })
                        .catch(collected =>{
                            message.channel.send('\\🚫 You didn\'t give me anything so I\'ll go ahead and cancel this note.');
                        });
                    });
                }
            });
    }

    function updateProject(projects, cleanProjects){
        
        const filter = user => user.id != message.channel.lastMessage.author.id;
        
        message.channel.send('\\❔ Which project would you like to edit?\n' + projects).then(() => {
            message.channel.awaitMessages(filter, {max: 1, time: 30000, errors: ['time'] })
            .then(collected =>{
                
                var input = collected.first().channel.lastMessage.content;
                var counter = 0;


                var stringparts = cleanProjects.split('-');
                for(i = 0; i < stringparts.length; i++){
                    console.log(stringparts[i]);
                    if(input.toLowerCase() == stringparts[i]){
                        var projectChoice = stringparts[i];
                        counter++;
                    }
                }


                if(input.toLowerCase() == '!cancel'){
                    message.channel.send('\\🚫 Okay I\'ll cancel this update.');
                    return;
                }
                else if(counter == 0){
                    message.channel.send('\\❗ You gave me an invalid input. Try running *!update* again*');
                    return;
                }
                else{
                    console.log(projectChoice);

                    message.channel.send('\\❔ Which field would you like to edit?\n\\✅Name\n\\✅Description\n\\✅Date Due\n\\✅Manager\n\\✅Team').then(() => {
                        message.channel.awaitMessages(filter, {max: 1, time: 30000, errors: ['time'] })
                        .then(collected =>{
                            
                            var input = collected.first().channel.lastMessage.content;

                            switch(input.toLowerCase()){

                                case 'name':
                                    console.log('name');
                                    message.channel.send('\\❔ Please enter the new **Project Name**.').then(() => {
                                        message.channel.awaitMessages(filter, {max: 1, time: 30000, errors: ['time'] })
                                        .then(collected =>{
                                            
                                            var input = collected.first().channel.lastMessage.content;

                                            try{
                                                
                                                database.checkDatabaseDuplicate(input.toLowerCase(), function(err, result){
                                                    if(err){
                                                        console.log(err)
                                                    }
                                                    else{
                                                        console.log(result);
                                                        if(result.length >= 1){
                                                            message.channel.send("\\❗ A project with that name already exists in the database. Please do **!update** to restart.");
                                                            return;
                                                        }
                                                        else{
                                                            database.changeField(message.guild.id, projectChoice, 'projectname', input, function(err, fieldResult){
                                                                if(err){
                                                                    console.log(err);
                                                                }
                                                                else{
                                                                    console.log(fieldResult);
                                                                    message.channel.send('**Project Name Successfully updated.**');
                                                                }
                                                                });

                                                                projectChoice = projectChoice.toLowerCase();

                                                                var tempSplit = projectChoice.split(' ');

                                                                for(l = 0; l < tempSplit.length; l++){
                                                                    tempSplit[l] = tempSplit[l][0].toUpperCase() + tempSplit[l].substr(1);
                                                                }
                                                            
                                                                var capsNames = '';
                                                            
                                                                for(j = 0; j < tempSplit.length; j++){
                                                                    if(j == tempSplit.length-1){
                                                                        capsNames += tempSplit[j];
                                                                    }
                                                                    else{
                                                                        capsNames += tempSplit[j] + ' ';
                                                                    }
                                                                    
                                                                }

                                                                input = input.toLowerCase();

                                                                var tempSplit2 = input.split(' ');

                                                                for(l = 0; l < tempSplit2.length; l++){
                                                                    tempSplit2[l] = tempSplit2[l][0].toUpperCase() + tempSplit2[l].substr(1);
                                                                }
                                                            
                                                                var capsNames2 = '';
                                                            
                                                                for(j = 0; j < tempSplit2.length; j++){
                                                                    if(j == tempSplit2.length-1){
                                                                        capsNames2 += tempSplit2[j];
                                                                    }
                                                                    else{
                                                                        capsNames2 += tempSplit2[j] + ' ';
                                                                    }
                                                                    
                                                                }


                                                            console.log(`${capsNames}-project-text, ${capsNames} Project Voice, ${capsNames} Project Channels`)

                                                            var voiceChannel = message.guild.channels.cache.find(channel => channel.name === `${capsNames} Project Voice`);

                                                            voiceChannel.setName(`${capsNames2} Project Voice`, 'Project Name was changed');

                                                            var  categoryChannel = message.guild.channels.cache.find(channel => channel.name === `${capsNames} Project Channels`);
                                                            
                                                            categoryChannel.setName(`${capsNames2} Project Channels`, 'Project Name was changed');

                                                            projectChoice =  projectChoice.replace(' ', '-');

                                                            var textChannel = message.guild.channels.cache.find(channel => channel.name === `${projectChoice}-project-text`);

                                                            textChannel.setName(`${input}-project-text`, 'Project Name was changed');

                                                            var role = message.guild.roles.cache.find(channel => channel.name === `${capsNames}`);

                                                            role.setName(`${capsNames2}`, 'Project name was changed');
                                                        }
                                                    }   
                                                });
                                            }
                                            catch(err){
                                                console.log(err);
                                            }
                                
                                        })
                                        .catch(collected => {
                                            message.channel.send('\\🚫 You didn\'t give me a response, so I\'m going to go back to my main menu.');
                                        });
                                    });
                                    break;
                                case 'description':
                                case 'desc':
                                    console.log('description');
                                    message.channel.send('\\❔ Please enter the new **Project Description**.').then(() => {
                                        message.channel.awaitMessages(filter, {max: 1, time: 120000, errors: ['time'] })
                                        .then(collected =>{
                                            
                                            var input = collected.first().channel.lastMessage.content;

                                            try{
                                                database.changeField(message.guild.id, projectChoice, 'projectdescription', input, function(err, result){
                                                if(err){
                                                    console.log(err);
                                                }
                                                else{
                                                    console.log(result);
                                                    message.channel.send('\\✅ **Project Description Successfully updated.**');
                                                }
                                                });
                                            }
                                            catch(err){
                                                console.log(err);
                                            }
                                
                                        })
                                        .catch(collected => {
                                            message.channel.send('\\🚫 You didn\'t give me a response, so I\'m going to go back to my main menu.');
                                        });
                                    });
                                    break;
                                case 'date due':
                                case 'due':
                                case 'date':
                                    console.log('due');
                                    message.channel.send('\\❔ Please enter the new **Due Date**.').then(() => {
                                        message.channel.awaitMessages(filter, {max: 1, time: 30000, errors: ['time'] })
                                        .then(collected =>{

                                            var tempSplit = projectChoice.split(' ');

                                                    for(i = 0; i < tempSplit.length; i++){
                                                        tempSplit[i] = tempSplit[i][0].toUpperCase() + tempSplit[i].substr(1);
                                                    }

                                                    var projName = '';

                                                    for(i = 0; i < tempSplit.length; i++){
                                                        if(i == tempSplit.length-1){
                                                            projName += tempSplit[i];
                                                        }
                                                        else{
                                                            projName += tempSplit[i] + ' ';
                                                        }
                                                    }
                                            
                                            var input = collected.first().channel.lastMessage.content;
                                            
                                            var role = message.guild.roles.cache.find(role => role.name === projName);

                                            if(isValidDate(input)){

                                                try{
                                                    database.changeField(message.guild.id, projectChoice, 'datedue', input, function(err, result){
                                                    if(err){
                                                        console.log(err);
                                                    }
                                                    else{
                                                        console.log(result);
                                                        message.channel.send('\\✅ **Project Due Date Successfully updated.**');

                                                        var dueDate = fs.readFileSync('dueDate.json', 'utf-8');
                                                        var pushing = JSON.parse(dueDate);
            
                                                        try{
                                                            for(k = 0; k < pushing.length; k++){
                                                                if(`<@&${role.id}>` == pushing[k].projectRole){
                                                                    pushing[k].projectDueDate = input + " 10:30:00.000";
                                                                }
                                                            }
                                                        }
                                                        catch(err){
                                                            console.log(err);
                                                        }
            
                                                        dueDate = JSON.stringify(pushing);
                                                        fs.writeFileSync('dueDate.json', dueDate, 'utf-8');
                                                    }
                                                    });
                                                }
                                                catch(err){
                                                    console.log(err);
                                                }
                                            }
                                            else{
                                                message.channel.send('\\❗ The date you entered for the update was invalid, so I\'m going to cancel this update. Use **!update** again when you have a valid date.');
                                            }
                                
                                        })
                                        .catch(collected => {
                                            message.channel.send('\\🚫 You didn\'t give me a response, so I\'m going to go back to my main menu.');
                                        });
                                    });
                                    break;
                                case 'manager':
                                    console.log('manager');
                                    message.channel.send('\\❔ Please enter the new **Project Manager\'s @**.').then(() => {
                                        message.channel.awaitMessages(filter, {max: 1, time: 30000, errors: ['time'] })
                                        .then(collected =>{
                                            
                                            var input = collected.first().channel.lastMessage.content;

                                            var tempSplit = projectChoice.split(' ');

                                                    for(i = 0; i < tempSplit.length; i++){
                                                        tempSplit[i] = tempSplit[i][0].toUpperCase() + tempSplit[i].substr(1);
                                                    }

                                                    var projUpper = '';

                                                    for(i = 0; i < tempSplit.length; i++){
                                                        if(i == tempSplit.length-1){
                                                            projUpper += tempSplit[i];
                                                        }
                                                        else{
                                                            projUpper += tempSplit[i] + ' ';
                                                        }
                                                    }

                                                console.log(projUpper);

                                            try{
                                                
                                                database.getNotes(message.guild.id, projUpper.toLowerCase(), function(error, result){
                                                    if(error){
                                                        console.log(error);
                                                    }
                                                    else{
                                                        var currmanager = result[0].projectmanager;
                                                        for(r = 0; r < currmanager.length; r++){
                                                            currmanager = currmanager.replace('<', '');
                                                            currmanager = currmanager.replace('!','');
                                                            currmanager = currmanager.replace('@','');
                                                            currmanager = currmanager.replace('>','');
                                                            currmanager = currmanager.replace('&','');
                                                        }
                                                        message.guild.roles.fetch(message.guild.roles.cache.find(role => role.name === projUpper).id)
                                                        .then(role => {
                                                            var member = message.guild.member(currmanager);
                                                            member.roles.remove(role.id);
                                                        })
                                                        .catch(console.error);
                                                    }
                                                });
                                                
                                                database.changeField(message.guild.id, projectChoice, 'projectmanager', input, function(err, result){
                                                if(err){
                                                    console.log(err);
                                                }
                                                else{
                                                    console.log(result);
                                                    message.channel.send('\\✅ **Project Manager Successfully updated.**');
                                                }
                                                });

                                                for(r = 0; r < input.length; r++){
                                                    input = input.replace('<', '');
                                                    input = input.replace('!','');
                                                    input = input.replace('@','');
                                                    input = input.replace('>','');
                                                    input = input.replace('&','');
                                                }


                                                message.guild.roles.fetch(message.guild.roles.cache.find(role => role.name === projUpper).id)
                                                    .then(role => {
                                                        var member = message.guild.member(input);
                                                        member.roles.add(role.id);
                                                    })
                                                    .catch(console.error);
                                            }
                                            catch(err){
                                                console.log(err);
                                            }
                                
                                        })
                                        .catch(collected => {
                                            message.channel.send('\\🚫 You didn\'t give me a response, so I\'m going to go back to my main menu.');
                                        });
                                    });
                                    break;
                                case 'team':
                                    console.log('team');
                                    message.channel.send('\\❔ Please enter the new **Team Members @\'s**.\nRemember to format the @\'s as follows:\n @Rick Frank @Kent Freed @William Hunt').then(() => {
                                        message.channel.awaitMessages(filter, {max: 1, time: 30000, errors: ['time'] })
                                        .then(collected =>{
                                            
                                            var input = collected.first().channel.lastMessage.content.split(' ');

                                            var nameString = '';
                                            for(i = 0; i < input.length; i++){
                                                nameString += input[i] + '\n';
                                            }

                                            try{
                                                database.changeField(message.guild.id, projectChoice, 'teammembers', nameString, function(err, result){
                                                if(err){
                                                    console.log(err);
                                                }
                                                else{
                                                    console.log(result);
                                                    message.channel.send('\\✅ **Project Team Members Successfully updated.**');
                                                }
                                                })

                                                    var tempSplit = projectChoice.split(' ');

                                                    for(i = 0; i < tempSplit.length; i++){
                                                        tempSplit[i] = tempSplit[i][0].toUpperCase() + tempSplit[i].substr(1);
                                                    }

                                                    var projName = '';

                                                    for(i = 0; i < tempSplit.length; i++){
                                                        if(i == tempSplit.length-1){
                                                            projName += tempSplit[i];
                                                        }
                                                        else{
                                                            projName += tempSplit[i] + ' ';
                                                        }
                                                    }

                                                    console.log(projName);

                                                    try{
                                                        
                                                        var role = message.guild.roles.cache.find(role => role.name === projName);
                                                        console.log(role);
                                                        role.delete()
                                                            .then(() => {

                                                                message.guild.roles.create({
                                                                    data: {
                                                                        name: `${projName}`,
                                                                    },
                                                                    reason: 'Created this role so the new project team can identify each other.',
                                                                })
                                                                    .then(() => {
            
                                                                        database.getNotes(message.guild.id, projName.toLowerCase(), function(error, result){
                                                                            if(error){
                                                                                console.log(error);
                                                                            }
                                                                            else{
                                                                                var currmanager = result[0].projectmanager;
                                                                                var identification = [];
                                        
                                                                                nameString += currmanager;

                                                                                console.log('\n\n\n' + nameString + '\n\n\n');

                                                                                identification = nameString.split('\n');
                    
                                                                                console.log('before removing');
                                                                                console.log(identification);
                    
                                                                                for(r = 0; r < identification.length; r++){
                                                                                    identification[r] = identification[r].replace('<','');
                                                                                    identification[r] = identification[r].replace('!','');
                                                                                    identification[r] = identification[r].replace('@','');
                                                                                    identification[r] = identification[r].replace('>','');
                                                                                    identification[r] = identification[r].replace('&','');
                                                                                }
                                                                                
                                                                                console.log('after removing');
                                                                                for(g = 0; g <identification.length; g++){
                                                                                    console.log(identification[g]);
                                                                                }
                                                                                
                                                                                console.log('here');
                                                                                message.guild.roles.fetch(message.guild.roles.cache.find(role => role.name === projName).id)
                                                                                    .then(role => {
                                                                                        for(k = 0; k < identification.length; k++){
                                                                                            var member = message.guild.member(identification[k]);
                                                                                            member.roles.add(role);
                                                                                            console.log('here2');
                                                                                        }

                                                                                        var channelTwo = message.guild.channels.cache.find(channel => channel.name === `${projName} Project Channels`);

                                                                                        channelTwo.overwritePermissions([
                                                                                                {
                                                                                                    id: message.guild.roles.cache.find(role => role.name === projName).id,
                                                                                                    allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'CONNECT', 'SPEAK'],
                                                                                                    deny: ['MENTION_EVERYONE', 'MANAGE_CHANNELS', 'CREATE_INSTANT_INVITE', 'MANAGE_GUILD', 'VIEW_AUDIT_LOG']
                                                                                                },
                                                                                                {
                                                                                                    id: message.guild.id,
                                                                                                    deny:['VIEW_CHANNEL'],
                                                                                                },
                                                                                            ]
                                                                                        )

                                                                                        var channel = message.guild.channels.cache.find(channel => channel.name === `${projName} Project Voice`);

                                                                                        channel.overwritePermissions([
                                                                                                {
                                                                                                    id: message.guild.roles.cache.find(role => role.name === projName).id,
                                                                                                    allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'CONNECT', 'SPEAK'],
                                                                                                    deny: ['MENTION_EVERYONE', 'MANAGE_CHANNELS', 'CREATE_INSTANT_INVITE', 'MANAGE_GUILD', 'VIEW_AUDIT_LOG']
                                                                                                },
                                                                                                {
                                                                                                    id: message.guild.id,
                                                                                                    deny:['VIEW_CHANNEL'],
                                                                                                },
                                                                                            ]
                                                                                        )

                                                                                        var channelThree = message.guild.channels.cache.find(channel => channel.name === `${projName.toLowerCase().replace(' ', '-')}-project-text`);

                                                                                        channelThree.overwritePermissions([
                                                                                                {
                                                                                                    id: message.guild.roles.cache.find(role => role.name === projName).id,
                                                                                                    allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'CONNECT', 'SPEAK'],
                                                                                                    deny: ['MENTION_EVERYONE', 'MANAGE_CHANNELS', 'CREATE_INSTANT_INVITE', 'MANAGE_GUILD', 'VIEW_AUDIT_LOG']
                                                                                                },
                                                                                                {
                                                                                                    id: message.guild.id,
                                                                                                    deny:['VIEW_CHANNEL'],
                                                                                                },
                                                                                            ]
                                                                                        )

                                                                                    })
                                                                                    .catch(console.error);
                                                                            }
                                                                        });
                                                                        
            
                                                                    })
                                                                    .catch(console.error);
                                                            })
                                                            .catch(console.error);
                                                    }
                                                    catch(err){
                                                        console.log(err);
                                                    }

                                            }
                                            catch(err){
                                                console.log(err);
                                            }
                                
                                        })
                                        .catch(collected => {
                                            message.channel.send('\\🚫 You didn\'t give me a response, so I\'m going to go back to my main menu.');
                                        });
                                    });
                                    break;
                                default:
                                    message.channel.send('\\❗ Your input didnt match any of the fields. You\'ll need to start over with *!update*');
                                    return;
                            }


                        })
                        .catch(collected => {
                            message.channel.send('\\🚫 You didn\'t give me a response, so I\'m going to go back to my main menu.');
                        });
                    });
                }
            })
            .catch(collected => {
                message.channel.send('\\🚫 You didn\'t give me a response, so I\'m going to go back to my main menu.');
            });
        });
    }

    function deleteProj(name){
        try{

            console.log(name);
            
            database.checkExists(message.guild.id, name, function(err, result){
                if(err){
                    console.log(err);
                }
                else if(result.length != 0){    
                    
                    var tempSplit = result[0].projectname.split(' ');

                            for(l = 0; l < tempSplit.length; l++){
                                tempSplit[l] = tempSplit[l][0].toUpperCase() + tempSplit[l].substr(1);
                            }
                        
                            var capsNames = '';
                        
                            for(j = 0; j < tempSplit.length; j++){
                                if(j == tempSplit.length-1){
                                    capsNames += tempSplit[j];
                                }
                                else{
                                    capsNames += tempSplit[j] + ' ';
                                }
                                
                            }


                    database.deleteProject(message.guild.id, name, function(err, deletion){
                        if(err){
                            console.log(err)
                        }
                        else{
                                    try{
                                        console.log('here');
                                        console.log(capsNames);
                                        const channelname =  message.guild.channels.cache.find(r => r.name === `${capsNames} Project Voice`);
                                        channelname.delete();

                                        const channelnameThree = message.guild.channels.cache.find(r => r.name === `${capsNames} Project Channels`);
                                        channelnameThree.delete();

                                        const newName = name.replace(' ', '-');
                                        console.log(newName.toLowerCase() + '-project-text');
                                        const channelnameTwo = message.guild.channels.cache.find(r => r.name === `${newName.toLowerCase()}-project-text`);
                                        channelnameTwo.delete();

                                        const role = message.guild.roles.cache.find(r => r.name === `${capsNames}`);

                                        var remindDate;
                                        var pushDate;

                                        remindDate = fs.readFileSync("remindDates.json", "utf-8");
                                        pushDate = JSON.parse(remindDate);

                                        for(g = 0; g < pushDate.length; g++){
                                            if(pushDate[g].channelName == `${newName.toLowerCase()}-project-text`){
                                                console.log('in-remindif');
                                                pushDate.splice(g, 1);
                                            }
                                        }

                                        remindDate = JSON.stringify(pushDate);
                                        fs.writeFileSync("remindDates.json", remindDate, "utf-8");

                                        
                                        var dueDate;
                                        var pushing;

                                        dueDate = fs.readFileSync("dueDate.json", "utf-8");                           
                                        pushing = JSON.parse(dueDate);

                                        for(q = 0; q < pushing.length; q++){
                                            if(`<@&${role.id}>` == pushing[q].projectRole){
                                                console.log('in if');
                                                pushing.splice(q, 1);
                                            }
                                        }
                                        dueDate = JSON.stringify(pushing);
                                        fs.writeFileSync("dueDate.json", dueDate, "utf-8");

                                        role.delete();
                                    }
                                    catch(err){
                                        console.log('deletion error with the channels and roles',  err);
                                    }
                        }
                    });
                }
                else{
                    message.channel.send('\\❗ The project you are trying to delete doesn\'t exist in the database!');
                    return;
                }
            });
        }
        catch(err){
            message.channel.send("\\❗ That project wasn't found in the database for some reason.");
        }
        
    }

    function displayP(category){
        database.displayProjects(category, message.guild.id, function(err, display){
            if(err){
                console.log("Something went wrong displaying the projects.", err);
            }
            else{
                if(display.length == 0){
                    if(category ==  null){
                        message.channel.send('\\❗ There are no projects in the database!');
                    }
                    else{
                        message.channel.send(`\\❗ There are no projects to display from the **project ${category.toLowerCase()}** category.`);
                    }
                }
                else{
                    if(category == null){
                        message.channel.send(`\\✅ Here are **all** the projects in the database.`);
                    }
                    else{
                        message.channel.send(`\\✅ Here are all the projects from the **project ${parts[1].toLowerCase()}** category.`);
                    }
                    for(var j = 0; j < display.length; j++){
                        message.channel.send(printer.printEmebed(display[j].projectname, display[j].projectdescription, display[j].teammembers, display[j].datedue, display[j].datecreated, display[j].projectmanager, display[j].projectstate));
                    }
                }
            }
        });
    }

    function getDescription(concat){

        var projName = concat;
        var projDescription;

        const filter = user => user.id != message.channel.lastMessage.author.id;

                message.channel.send("\\❔ Give me a description of this project summed up in a short message. I'll give you two minutes.").then(() => {
                    message.channel.awaitMessages(filter, {max: 1, time: 120000, errors: ['time'] })
                    .then(collected =>{
                        
                        projDescription = collected.first().channel.lastMessage.content;

                        if(projDescription.toLowerCase() == '!cancel'){
                            message.channel.send('\\🚫 Okay I\'ll cancel creating this project.');
                            return;
                        }

                        getCompletionDate(projName, projDescription, filter);

                    })
                    .catch(collected =>{
                        message.channel.send("\\🚫 You didn't enter a description so I am going to cancel this project creation. When you're ready to call me with *!createnew.*");
                        return;
                    });
                });
        
    }

    function getCompletionDate(projName, projDescription, filter){

        var completionDate;

        message.channel.send("\\❔ When is the targeted completion date of the project? In YYYY-MM-DD format.").then(() => {
            message.channel.awaitMessages(filter, {max: 1, time: 120000, errors: ['time'] })
            .then(collected =>{
                
                completionDate = (collected.first().channel.lastMessage.content);

                if(completionDate.toLowerCase() == '!cancel'){
                    message.channel.send('\\🚫 Okay I\'ll cancel creating this project.');
                    return;
                }

                if(completionDate.toLowerCase() == '!back'){
                     return getDescription(projName);
                }

                if(isValidDate(completionDate)){
                    getProjectManager(projName, projDescription, completionDate, filter);
                }
                else{
                    message.channel.send("\\❗ Looks like the format of your date was incorrect, try again.")
                    getCompletionDate(projName, projDescription, filter);
                }
                   
            })
            .catch(collected =>{
                message.channel.send("\\🚫 You didn't enter a completion date so I am going to cancel this project creation. When you're ready, call me with *!createnew*.");
                return;
            });
        });
    }

    function getProjectManager(projName, projDescription, completionDate, filter){

        var projectManager;

        message.channel.send("\\❔ Who is the Project Manager of this project?").then(() => {
            message.channel.awaitMessages(filter, {max: 1, time: 120000, errors: ['time'] })
            .then(collected => {
                
                projectManager = collected.first().channel.lastMessage.content;

                if(projectManager.toLowerCase() == '!cancel'){
                    message.channel.send('\\🚫 Okay I\'ll cancel creating this project.');
                    return;
                }

                if(projectManager.toLowerCase() == '!back'){
                    getCompletionDate(projName, projDescription, filter);
                }
                else{
                    addTeamMembers(projName, projDescription, filter, completionDate, projectManager);
                }
            })
            .catch(collected => {
                message.channel.send("\\🚫 You didn't tell me who the Project Manager is, so I am going to cancel this project creation. When you're ready, call me with *!createnew*.")
            });
        });
    }

    function addTeamMembers(projName, projDescription, filter, completionDate, projectManager){

        var temp = new Date();
        var month = temp.getMonth()+1;

        message.channel.send('\\❔ Would you like me to add team members to this project? \\✅Yes or \\❌No.').then(() => {
            message.channel.awaitMessages(filter, {max: 1, time: 60000, errors: ['time'] })
            .then(collected =>{
                var answer = collected.first().channel.lastMessage.content;
        
                if(answer.toLowerCase() == '!cancel'){
                    message.channel.send('\\🚫 Okay I\'ll cancel creating this project.');
                    return;
                }

                if(answer.toLowerCase() == '!back'){
                    getProjectManager(projName, projDescription, completionDate, filter);
                }

                if(answer.toLowerCase() === 'no'){

                    message.channel.send('Good choice.');

                    try{
                        message.channel.send(printer.printEmebed(projName, projDescription, null, completionDate, temp.getFullYear()+'-'+month+'-'+temp.getDate(), projectManager, 'Created'));
                        correctInformation(projName, projDescription, completionDate, null, projectManager, filter);
                    }catch(err){
                        message.channel.send('\\❗ Something unexpected happened, I\'m sorry. Let\'s try this again. Do *!createnew* again please.');
                        console.log(err);
                    }

                }
                else if(answer.toLowerCase() === 'yes'){
                    message.channel.send("\\📰 Okay. Please enter all team members @'s in a row. Example: *@John Doe @Willaim Joe @Reed Hunt*\n\\❗ Note: Discord will automatically put a space after you @ someone so there is no need for another space \\❗").then(() => {
                        message.channel.awaitMessages(filter, {max: 1, time: 120000, errors: ['time'] })
                        .then(collected =>{
                            var names = collected.first().channel.lastMessage.content.split(' ');
                            var nameString = projectManager + '\n';
                            for(i = 0; i < names.length; i++){
                                nameString += names[i] + '\n';
                            }
                            
                            try{
                                message.channel.send(printer.printEmebed(projName, projDescription, nameString, completionDate, temp.getFullYear()+'-'+month+'-'+temp.getDate(), projectManager, 'Created'));
                                console.log(names);
                                correctInformation(projName, projDescription, completionDate, nameString, projectManager, filter);
                            }catch(err){
                                message.channel.send('\\❗Something unexpected happened, I\'m sorry. Let\'s try this again.');
                                addTeamMembers(projName, projDescription, filter, completionDate, projectManager);
                                console.log(err);
                            }
                                                   

                        })
                        .catch(collected =>{
                            message.channel.send("\\❗ You didn't give me their names so I am going to cancel this project creation. When you're ready, call me with *!createnew.*");
                            return;
                        });
                    });
                }
                else{
                    message.channel.send("\\❗ I think you gave me an answer that was neither a yes or no.");
                    addTeamMembers(projName, projDescription, filter, completionDate, projectManager);
                }
                
            })
            .catch(collected =>{
                message.channel.send("\\🚫 You didn't give me an answer so I am going to cancel this project creation. When you're ready to call me with *!createnew.*");
                return;
            });
        });

    }

    function correctInformation(projName, projDescription, completionDate, nameString, projectManager, filter){

        //if(nameString == null){
    
            message.channel.send('\\❔ Is this information correct? \\✅Yes or \\❌No.').then(() => {
                message.channel.awaitMessages(filter, {max: 1, time: 60000, errors: ['time'] })
                .then(collected =>{
                    var answer = collected.first().channel.lastMessage.content;
                    if(answer.toLowerCase() === 'no'){
                        var string = `\\🔄 Okay let's start over, try *!createnew* again.`;
                        message.channel.send(string);
                        return;
                    }
                    else if(answer.toLowerCase() == 'yes'){


                        message.channel.send("\\✅ Perfect. I'll add it to the database under the Project Creation Stage.");
                        
                        var today = new Date();
                        var year = today.getFullYear();
                        var day = today.getDate();
                        var month = today.getMonth()+1;
                        try{
                            var confirm = database.insertNewProject(message.guild.id, projName, projDescription, year+'-'+month+'-'+day, completionDate, nameString,  projectManager);
                        }
                        catch(err){
                            console.log(err);
                        }
                        message.channel.send('\\✅ **'+ confirm + '**');

                        if(nameString == null){
                            console.log('no team');

                            message.guild.roles.create({
                                data: {
                                    name: `${projName}`,
                                },
                                reason: 'Created this role so the project team can identify each other.',
                            })
                                .then(() => {
    
                                    console.log('before removing');                                    
                                    var roleName = `${projName}`;
                                    
                                    try{                         
    
                                        
                                            //console.log('\n\n\n' + identification[i]);
                                            message.guild.roles.fetch(message.guild.roles.cache.find(role => role.name === roleName).id)
                                                .then(role => {
                                                    for(r = 0; r < projectManager.length; r++){
                                                        projectManager = projectManager.replace('<', '');
                                                        projectManager = projectManager.replace('!','');
                                                        projectManager = projectManager.replace('@','');
                                                        projectManager = projectManager.replace('>','');
                                                        projectManager = projectManager.replace('&','');
                                                    }
                                                    var member = message.guild.member(projectManager);
                                                    member.roles.add(role.id);
                                                    
                                                })
                                                .catch(console.error);
                                            console.log('ran');

                                            projName = projName.toLowerCase()

                                             
                                            var tempSplit = projName.split(' ');

                                            for(l = 0; l < tempSplit.length; l++){
                                                tempSplit[l] = tempSplit[l][0].toUpperCase() + tempSplit[l].substr(1);
                                            }
                                        
                                            var capsNames = '';
                                        
                                            for(j = 0; j < tempSplit.length; j++){
                                                if(j == tempSplit.length-1){
                                                    capsNames += tempSplit[j];
                                                }
                                                else{
                                                    capsNames += tempSplit[j] + ' ';
                                                }
                                                
                                            }
    
                                            message.guild.channels.create(`${capsNames} Project Channels`, {
                                                type: 'category',
                                                position: 1,
                                                permissionOverwrites: [
                                                    {
                                                        id: message.guild.roles.cache.find(role => role.name === `${projName}`).id,
                                                        allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'CONNECT', 'SPEAK'],
                                                        deny:['MENTION_EVERYONE', 'MANAGE_CHANNELS', 'CREATE_INSTANT_INVITE', 'MANAGE_GUILD', 'VIEW_AUDIT_LOG'],
                                                    },
                                                    {
                                                        id: bot.user.id,
                                                        allow:  ['ADMINISTRATOR', 'VIEW_CHANNEL', 'MANAGE_CHANNELS'],
                                                    },  
                                                    {
                                                        id: message.guild.id,
                                                        deny:['VIEW_CHANNEL'],
                                                    }
                                                ]
                                            }).then(cat => {
                                                message.guild.channels.create(`${capsNames} Project Text`, {
                                                    type: 'text',
                                                    parent: cat,
                                                    permissionOverwrites: [
                                                        {
                                                            id: message.guild.roles.cache.find(role => role.name === `${projName}`).id,
                                                            allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'CONNECT', 'SPEAK'],
                                                            deny:['MENTION_EVERYONE', 'MANAGE_CHANNELS', 'CREATE_INSTANT_INVITE', 'MANAGE_GUILD', 'VIEW_AUDIT_LOG','READ_MESSAGE_HISTORY'],
                                                        },
                                                        {
                                                            id: bot.user.id,
                                                            allow:  ['ADMINISTRATOR', 'VIEW_CHANNEL', 'MANAGE_CHANNELS'],
                                                        }, 
                                                        {
                                                            id: message.guild.id,
                                                            deny:['VIEW_CHANNEL'],
                                                        }
                                                    ]
                                                });
                                                message.guild.channels.create(`${capsNames} project voice`, {
                                                    type: 'voice',
                                                    parent: cat,
                                                    permissionOverwrites: [
                                                        {
                                                            id: message.guild.roles.cache.find(role => role.name === `${projName}`).id,
                                                            allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'CONNECT', 'SPEAK', 'READ_MESSAGE_HISTORY'],
                                                            deny:['MENTION_EVERYONE', 'MANAGE_CHANNELS', 'CREATE_INSTANT_INVITE', 'MANAGE_GUILD', 'VIEW_AUDIT_LOG'],
                                                        },
                                                        {
                                                            id: bot.user.id,
                                                            allow:  ['ADMINISTRATOR', 'VIEW_CHANNEL', 'MANAGE_CHANNELS'],
                                                        }, 
                                                        {
                                                            id: message.guild.id,
                                                            deny:['VIEW_CHANNEL'],
                                                        }
                                                    ]
                                                });
                                            });
    
                                                                        
                                            try{
                                                var dueDate = fs.readFileSync("dueDate.json", "utf-8");
                                                                
                                                var pushing = JSON.parse(dueDate);
                                                                    
                                                var dateObj = {
                                                    projectDueDate: completionDate + " 10:30:00.000",
                                                    projectRole: "<@&"+ message.guild.roles.cache.find(role => role.name === `${projName}`).id + ">",
                                                    serverID: message.guild.id
                                                }
                                                                    
                                                pushing.push(dateObj);
                                                                    
                                                dueDate = JSON.stringify(pushing);
                                                                    
                                                fs.writeFileSync("dueDate.json", dueDate, "utf-8");
                                            }
                                            catch(error){
                                                console.log(error);
                                            }
    
                                    }
                                    catch(err){
                                        console.log(err);
                                    }
                                })
                                .catch(console.error);
                            
                        }
                        else{

                            var identification = nameString.split('\n');

                                message.guild.roles.create({
                                    data: {
                                        name: `${projName}`,
                                    },
                                    reason: 'Created this role so the project team can identify each other.',
                                })
                                    .then(() => {

                                        console.log('before removing');
                                        console.log(identification);

                                        for(r = 0; r < identification.length; r++){
                                            identification[r] = identification[r].replace('<', '');
                                            identification[r] = identification[r].replace('!','');
                                            identification[r] = identification[r].replace('@','');
                                            identification[r] = identification[r].replace('>','');
                                            identification[r] = identification[r].replace('&','');
                                        }
                                        
                                        console.log('after removing');
                                        for(g = 0; g <identification.length-1; g++){
                                            console.log(identification[g]);
                                        }
                                        
                                        var roleName = `${projName}`;
                                        
                                        try{                         

                                            
                                                //console.log('\n\n\n' + identification[i]);
                                                message.guild.roles.fetch(message.guild.roles.cache.find(role => role.name === roleName).id)
                                                    .then(role => {
                                                        for(k = 0; k < identification.length-1; k++){
                                                        var member = message.guild.member(identification[k]);
                                                        member.roles.add(role.id);
                                                        }
                                                    })
                                                    .catch(console.error);
                                                console.log('ran');

                                                message.guild.channels.create(`${projName} Project Channels`, {
                                                    type: 'category',
                                                    position: 1,
                                                    permissionOverwrites: [
                                                        {
                                                            id: message.guild.roles.cache.find(role => role.name === `${projName}`).id,
                                                            allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'CONNECT', 'SPEAK'],
                                                            deny:['MENTION_EVERYONE', 'MANAGE_CHANNELS', 'CREATE_INSTANT_INVITE', 'MANAGE_GUILD', 'VIEW_AUDIT_LOG'],
                                                        },
                                                        {
                                                            id: bot.user.id,
                                                            allow:  ['ADMINISTRATOR', 'VIEW_CHANNEL', 'MANAGE_CHANNELS'],
                                                        },  
                                                        {
                                                            id: message.guild.id,
                                                            deny:['VIEW_CHANNEL'],
                                                        }
                                                    ]
                                                }).then(cat => {
                                                    message.guild.channels.create(`${projName} Project Text`, {
                                                        type: 'text',
                                                        parent: cat,
                                                        permissionOverwrites: [
                                                            {
                                                                id: message.guild.roles.cache.find(role => role.name === `${projName}`).id,
                                                                allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'CONNECT', 'SPEAK'],
                                                                deny:['MENTION_EVERYONE', 'MANAGE_CHANNELS', 'CREATE_INSTANT_INVITE', 'MANAGE_GUILD', 'VIEW_AUDIT_LOG','READ_MESSAGE_HISTORY'],
                                                            },
                                                            {
                                                                id: bot.user.id,
                                                                allow:  ['ADMINISTRATOR', 'VIEW_CHANNEL', 'MANAGE_CHANNELS'],
                                                            }, 
                                                            {
                                                                id: message.guild.id,
                                                                deny:['VIEW_CHANNEL'],
                                                            }
                                                        ]
                                                    });
                                                    message.guild.channels.create(`${projName} Project Voice`, {
                                                        type: 'voice',
                                                        parent: cat,
                                                        permissionOverwrites: [
                                                            {
                                                                id: message.guild.roles.cache.find(role => role.name === `${projName}`).id,
                                                                allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'CONNECT', 'SPEAK', 'READ_MESSAGE_HISTORY'],
                                                                deny:['MENTION_EVERYONE', 'MANAGE_CHANNELS', 'CREATE_INSTANT_INVITE', 'MANAGE_GUILD', 'VIEW_AUDIT_LOG'],
                                                            },
                                                            {
                                                                id: bot.user.id,
                                                                allow:  ['ADMINISTRATOR', 'VIEW_CHANNEL', 'MANAGE_CHANNELS'],
                                                            }, 
                                                            {
                                                                id: message.guild.id,
                                                                deny:['VIEW_CHANNEL'],
                                                            }
                                                        ]
                                                    });
                                                });

                                                                            
                                                try{
                                                    var dueDate = fs.readFileSync("dueDate.json", "utf-8");
                                                                    
                                                    var pushing = JSON.parse(dueDate);
                                                                        
                                                    var dateObj = {
                                                        projectDueDate: completionDate + " 10:30:00.000",
                                                        projectRole: "<@&"+ message.guild.roles.cache.find(role => role.name === `${projName}`).id + ">",
                                                        serverID: message.guild.id
                                                    }
                                                                        
                                                    pushing.push(dateObj);
                                                                        
                                                    dueDate = JSON.stringify(pushing);
                                                                        
                                                    fs.writeFileSync("dueDate.json", dueDate, "utf-8");
                                                }
                                                catch(error){
                                                    console.log(error);
                                                }

                                        }
                                        catch(err){
                                            console.log(err);
                                        }
                                    })
                                    .catch(console.error);
                        }
                    }
                    else{
                        message.channel.send('\\❗ I\'m looking for a yes or no, but you put something else.');
                        correctInformation(projName, projDescription, completionDate, nameString, projectManager, filter)
                    }
                    
                })
                .catch(collected =>{
                    message.channel.send("\\🚫 You didn't give me an answer so I am going to cancel this project creation. When you're ready to call me with *!createnew.*");
                    return;
                });
            });
        //}
        /*else{
    
            message.channel.send('Is this information correct?').then(() => {
                message.channel.awaitMessages(filter, {max: 1, time: 60000, errors: ['time'] })
                .then(collected =>{
                    var answer = collected.first().channel.lastMessage.content;
                    if(answer.toLowerCase() === 'no'){
                        var string = `Okay let's start over, try *!createnew* again.`;
                        message.channel.send(string);
                        return;
                    }
                    else{
                        message.channel.send("Perfect. I'll add it to the database under the Project Creation Phase.");
                    }
                    
                })
                .catch(collected =>{
                    message.channel.send("You didn't give me an answer so I am going to cancel this project creation. When you're ready to call me with *!createnew.*");
                    return;
                });
            });
    
        }*/
    }

    function isValidDate(dateString)
    {
    // First check for the pattern
    var regex = /^\d{4}\-\d{2}\-\d{2}$/;
    if(!regex.test(dateString)){
        return false;
    }

    var today = new Date();
    // Parse the date parts to integers
    var parts = dateString.split("-");
    var day = parseInt(parts[2], 10);
    var month = parseInt(parts[1], 10);
    var year = parseInt(parts[0], 10);

    // Check the ranges of month and year
    if(year < 1000 || year > 3000 || month == 0 || month > 12)
        return false;

    var monthLength = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];

    if(today.getFullYear() > year || (today.getFullYear() == year && today.getMonth()+1 > month) || (today.getFullYear() <= year && today.getMonth()+1 == month && today.getDate() > day)){
        message.channel.send("This date is in the past!");
        return false;    
    }

    // Adjust for leap years
    if(year % 400 == 0 || (year % 100 != 0 && year % 4 == 0))
        monthLength[1] = 29;

    // Check the range of the day
    return day > 0 && day <= monthLength[month - 1];
};


});

bot.on("ready", () => {

    var reminders;
    var pushing;

    reminders = fs.readFileSync("remindDates.json", "utf-8");                           
    pushing = JSON.parse(reminders);

    fs.watchFile("remindDates.json", {bigint: false, persistent: true, interval: 1800000}, (curr, prev) => {
        console.log('I see the file was edited');
        reminders = fs.readFileSync("remindDates.json", "utf-8");                           
        pushing = JSON.parse(reminders);
    });

    function remind(){

        const today = new Date();
        //console.log('in remind function');
        if(pushing == undefined){

        }
        else{
            for(i = 0; i < pushing.length; i++){
                var time = Date.parse(pushing[i].remindDate);
                const checkDate = new Date(time);
                //console.log('in for loop');
                if(today.getDate() == checkDate.getDate()){
                    //console.log('remind today');
                    //console.log(checkDate.getHours());
                    //console.log(today.getHours());
                    //console.log('same date');
                    if(((today.getHours() - checkDate.getHours()) == 0) || (checkDate.getHours() - today.getHours() < 0)){
                        //console.log('reminded');
                        const channel = bot.channels.cache.find(channel => channel.name === pushing[i].channelName);
                        channel.send(`Hey ${pushing[i].userID} here is your reminder: `);
                        channel.send(printer.printReminder(pushing[i]));
                        pushing.splice(i, 1);
                        reminders = JSON.stringify(pushing);            
                        fs.writeFileSync("remindDates.json", reminders, "utf-8");
                    }
                }
            }
        }
    }
    
    setInterval(remind, 3600000);
})

bot.on("guildCreate", (guild) => {

    if(guild.channels.cache.find(channel => channel.name === 'project-reminders')){
        return;
    }
    else{
        guild.channels.create(`project reminders`, {
            type: 'text',
            position: 1,
            permissionOverwrites: [
                {
                    id: bot.user.id,
                    allow:  ['ADMINISTRATOR', 'VIEW_CHANNEL', 'MANAGE_CHANNELS', 'SEND_MESSAGES', 'MENTION_EVERYONE'],
                },  
                {
                    id: message.guild.id,
                    deny:['SEND_MESSAGES', 'MANAGE_MESSAGES',],
                }
            ]
        })
    }
})

bot.on("ready", () => {
    
    var dueDate;
    var pushing;

    dueDate = fs.readFileSync("dueDate.json", "utf-8");                           
    pushing = JSON.parse(dueDate);

    fs.watchFile("dueDate.json", {bigint: false, persistent: true, interval: 1800000}, (curr, prev) => {
        console.log('I see the file was edited');
        dueDate = fs.readFileSync("dueDate.json", "utf-8");                           
        pushing = JSON.parse(dueDate);
    });

    function dueDateReminder(){
        var today = new Date();

        if(pushing == undefined){

        }
        else{
            for(i = 0; i < pushing.length; i++){
                var time = Date.parse(pushing[i].projectDueDate);
                const checkDate = new Date(time);
                var dateString = (checkDate.getFullYear() + '-' + (checkDate.getMonth()+1) + '-' + checkDate.getDate());

                if(today.getMonth() == checkDate.getMonth()){
                    if((checkDate.getDate() - today.getDate()) == 7){
                        var guild = bot.guilds.cache.find(guild => guild.id === pushing[i].serverID);
                        var reminderChannel = guild.channels.cache.find(channel => channel.name === 'project-reminders');
                        console.log(pushing[i].serverID);
                        database.dueAlert(null, pushing[i].serverID, dateString, function(error, display){
                            if(error){
                                console.log(error);
                            }
                            else{
                                console.log(display);
                                reminderChannel.send(`\\❗\\❗The following projects are due in 7 days\\❗\\❗`);
                                for(r = 0; r < display.length; r++){
                                    reminderChannel.send(printer.printUrgent(display[r].projectname, display[r].projectdescription, display[r].teammembers, display[r].datedue, display[r].datecreated, display[r].projectmanager));
                                }

                                pushing.splice(i, 1);
                                dueDate = JSON.stringify(pushing);            
                                fs.writeFileSync("dueDate.json", dueDate, "utf-8");

                            }
                        });
                    }
                    else{
                        console.log('no');
                    }
                }
            }
        }
    }

    setInterval(dueDateReminder, 86400000);
})

bot.on("ready", () => {

    function dontLoseConnection(){
        database.dontDisconnect();
    }

    setInterval(dontLoseConnection, 120000);
})

bot.login(token);